<?xml version="1.0"?>
<!--
#######################################################################

CCPN Data Model version 2.1.2

Autogenerated by XmlModelIo revision 1.18 on ?
  from data model element ccp.general.Template.FloatMatrixObject revision ?

#######################################################################
======================COPYRIGHT/LICENSE START==========================

FloatMatrixObject.xml: xmlmodel model for CCPN data model, MetaClass ccp.general.Template.FloatMatrixObject

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
A copy of this license can be found in ../../../../../license/LGPL.license
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="FloatMatrixObject"
 guid="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-18:19:50_00004"
 isAbstract="true" isDerived="false" isImplicit="false" isLeaf="false"
 isRoot="false" isSingleton="false" partitionsChildren="false"
 visibility="public_vis">
  <documentation>Numeric matrix, two or more dimensions.
Data are stored (and passed in and out) as a packed  linear array.
Dimensions are given with the slowest moving index first. The first (slowest moving) dimension size can be modified, the others are frozen. Data and the first dimension size are adapted when the other is modified. Data consisting entirely of the default value are not stored, saving space. </documentation>
  <taggedValues>
    <item tag="repositoryId">$Id:  $</item>
    <item tag="repositoryTag">$Name:  $</item>
  </taggedValues>


  <MetaAttribute name="data"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:03:29_00002"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   baseName="data" changeability="frozen" hicard="-1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="true" isUnique="false" locard="0"
   scope="instance_level" visibility="public_vis">
    <documentation>Matrix data as packed list.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>

    <!-- Start constraints for <MetaAttribute: ccp.general.Template.FloatMatrixObject.data>: -->
    <MetaConstraint name="data_empty_or_equal_to_size"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00001"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:03:29_00002"
     isImplicit="false">
      <codeStubs>
        <item tag="java">true /* NBNB TBD */</item>
        <item tag="python">len(values) in (0,self.size)</item>
      </codeStubs>
    </MetaConstraint>
    <!-- End constraints for <MetaAttribute: ccp.general.Template.FloatMatrixObject.data>: -->
  </MetaAttribute>

  <MetaAttribute name="defaultValue"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:03:29_00001"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   baseName="defaultValue" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>default value of data in matrix. Used instead of values that are not explicitly set.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
    <defaultValue>
      <item>0.0</item>
    </defaultValue>
  </MetaAttribute>

  <MetaOperation name="getNdim"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00005"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived attribute ndim</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00003</target>
    <codeStubs>
      <item tag="java">result = null; /* NBNB TBD */</item>
      <item tag="python">result = len(self.shape)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getPointValue"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00013"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="true" opType="otherQuery"
   scope="instance_level" visibility="public_vis">
    <documentation>get value of matrix at position 'point'. Point is converted as for self.pointToIndex.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00013</target>
    <codeStubs>
      <item tag="java">/* NBNB TBD */</item>
      <item tag="python">data = self.__dict__['data']
if data:
  result = data[self.pointToIndex(point)]
else:
  result = self.defaultValue</item>
    </codeStubs>


    <MetaParameter name="point"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00014"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00013"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>

    <MetaParameter name="result"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00015"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00013"
     direction="return_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="getSize"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00004"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived attribute size</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00002</target>
    <codeStubs>
      <item tag="java">result = null; /* NBNB TBD */</item>
      <item tag="python">import operator
result = reduce(operator.mul, self.shape)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getSubmatrixData"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00019"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="true" opType="otherQuery"
   scope="instance_level" visibility="public_vis">
    <documentation>get data (packed linear array)  for submatrix of shape 'shape' with 'point' as the corner with the smallest index values. point is convered as for self.pointToIndex. 'shape values that are omitted or set to zero are reset to the (rest of the) dimension size.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00019</target>
    <codeStubs>
      <item tag="java">/* NBNB TBD */</item>
      <item tag="python"># get starting offset and normalise point -
# padding with zero and converting to positive indices
offset = self.pointToIndex(point)
point = self.indexToPoint(offset)

# set up internal params
ndim = self.ndim
sizes = self.shape

# set widths and check
shape = list(shape)
if len(shape) &gt; ndim:
  raise ApiError("Number of dimensions %s exceeds ndim %s" % (shape,ndim))
for ii,width in enumerate(shape):
  if not width:
    shape[ii] = sizes[ii] - point[ii]
  elif width &lt; 0 or width &gt; sizes[ii] - point[ii]:
    raise ApiError("Width %s in dim %s out of permitted range" % (width,ii))
# Extend shape, padding to dimension sizes.
shape.extend(sizes[ii] - point[ii] for ii in range(len(shape),ndim))

# set up strides list and lowest dim with continuous data.
strides = ndim*[0]
factor = 1
dodim = 0
for ii in range(ndim-1,-1,-1):
  strides[ii] = factor
  factor *= shape[ii]
  if not dodim and shape[ii] != sizes[ii]:
    dodim = ii
size = factor

# length of contiguous stretch
stretch = strides[dodim] * shape[dodim]

# get hold of data (must bypass API for speed)
data = self.__dict__['data'] 

if not data:
  # default-only matrix
  result = size*(self.defaultValue,)

else:

  if dodim &lt;= 0:
    # take single stretch from 1D array
    result = data[offset:offset+stretch]
  
  else:
    # do work for ndim array
  
    # set up result list (optimisation - could be done with extend instead)
    import operator
    subsize = reduce(operator.mul, shape)
    result = subsize*[None]
  
    # set up multidimensional loop
    vector = (dodim)*[0]
    dim = dim0 = dodim - 1
    target = 0
    while dim &gt;= 0:
    
      # do actual work
      next = target+stretch
      result[target:next] = data[offset:offset+stretch]
      target = next
    
      # update reading offset
      vector[dim] += 1
      if vector[dim] &lt; shape[dim]:
        offset += strides[dim]
        if dim &lt; dim0:
          dim += 1
      else:
        vector[dim] = 0
        dim -=1
  #
  result = tuple(result)</item>
    </codeStubs>


    <MetaParameter name="point"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00020"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00019"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>

    <MetaParameter name="result"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00022"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00019"
     direction="return_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
    </MetaParameter>

    <MetaParameter name="shape"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00021"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00019"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="indexToPoint"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00009"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="true" opType="otherQuery"
   scope="instance_level" visibility="public_vis">
    <documentation>Converts array index to equivalent point</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00009</target>
    <codeStubs>
      <item tag="java">result = null; /* NBNB TBD */</item>
      <item tag="python">import operator
shape = self.shape
if index &gt;= reduce(operator.mul, shape):
  raise ApiError("value %s of index to large for matrix of size %s" % (index, shape))
if index &lt; 0:
  raise ApiError("Negative value %s of index not allowed" % index)
result = len(shape) * [None]
for ii in range(len(shape)-1,-1,-1):
  index,result[ii] = divmod(index,shape[ii])
result = tuple(result)</item>
    </codeStubs>


    <MetaParameter name="index"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00010"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00009"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>

    <MetaParameter name="result"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00011"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00009"
     direction="return_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaAttribute name="ndim"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00003"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   baseName="ndim" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="true" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>Number of matrix dimensions</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:54_00001</valueType>
  </MetaAttribute>

  <MetaOperation name="pointToIndex"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00006"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="true" opType="otherQuery"
   scope="instance_level" visibility="public_vis">
    <documentation>converts point to equivalent array index. Point is padded to matrix dimension with zeros. negative index values -i in point are treated as eqal to (size-i).</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00006</target>
    <codeStubs>
      <item tag="java">result = null; /* NBNB TBD */</item>
      <item tag="python">shape = self.shape
lendiff = len(shape) -  len(point)
if lendiff &lt; 0:
  raise ApiError("Point %s incompatible with %s-dimensional matrix" 
                 % (point,len(shape)))
elif lendiff:
  point = list(point) + lendiff*[0]

result = 0
factor = 1
for ii in range(len(shape)-1,0,-1):   # loop over dimensions in reverse order
  # skipping the first one
  size = shape[ii]
  num,indx = divmod(point[ii],size) # convert -n to width-n
  if num not in (0,-1):
    raise ApiError("Point %s out of range for dimension %s" % (point,ii))
  result += factor * indx
  factor *= size
    
# treat first dimension differently, because locations beyond the end of
# the data may be relevant and are certainly defined
indx = point[0]
if indx &lt; 0:
  indx += shape[0]
if indx &lt; 0:
  raise ApiError("Point %s out of range for dimension %s" % (point,0))
result += factor * indx</item>
    </codeStubs>


    <MetaParameter name="point"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00007"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00006"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>

    <MetaParameter name="result"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00008"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00006"
     direction="return_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="removeSlice"
   guid="www.ccpn.ac.uk_Fogh_2011-04-07-12:26:00_00001"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="otherModify"
   scope="instance_level" visibility="public_vis">
    <documentation>Remove slice of matrix in slowest verying dimension at offset index.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-04-07-12:26:00_00001</target>
    <codeStubs>
      <item tag="java">/* NBNB TBD */</item>
      <item tag="python">data = self.__dict__['data']
if data:
  start = self.pointToIndex((index,))
  end = self.pointToIndex((index+1,))
  del data[start:end]
self.__dict__['shape'][0] -= 1</item>
    </codeStubs>


    <MetaParameter name="index"
     guid="www.ccpn.ac.uk_Fogh_2011-07-08-13:22:19_00001"
     container="www.ccpn.ac.uk_Fogh_2011-04-07-12:26:00_00001"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="resetData"
   guid="www.ccpn.ac.uk_Fogh_2011-04-06-10:33:07_00001"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="otherModify"
   scope="instance_level" visibility="public_vis">
    <documentation>Reset data to default values and free memory used.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-04-06-10:33:07_00001</target>
    <codeStubs>
      <item tag="java">/* NBNB TBD */</item>
      <item tag="python">del self.__dict__['data'][:]</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="setPointValue"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00016"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="otherModify"
   scope="instance_level" visibility="public_vis">
    <documentation>set value of matrix at position 'point'. Point is converted as for self.pointToIndex.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00016</target>
    <codeStubs>
      <item tag="java">/* NBNB TBD */</item>
      <item tag="python">if not isinstance(value, (float, int)):
  raise ApiError("parameter value %s is not a float" % value)
data = self.__dict__['data']
if data:
  data[self.pointToIndex(point)] = value
elif value != self.defaultValue:
    data.extend(self.size*[self.defaultValue])
    data[self.pointToIndex(point)] = value</item>
    </codeStubs>


    <MetaParameter name="point"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00017"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00016"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>

    <MetaParameter name="value"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00018"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00016"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="setSubmatrixData"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00023"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="otherModify"
   scope="instance_level" visibility="public_vis">
    <documentation>set data for submatrix of shape 'shape' with 'point' as the corner with the smallest index values to 'values' (packed linear array). Point is converted as for self.pointToIndex.  shape values that are omitted or set to zero are reset to the (rest of the) dimension size.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00023</target>
    <codeStubs>
      <item tag="java">/* NBNB TBD */</item>
      <item tag="python"># get starting offset and normalise point -
# padding with zero and converting to positive indices
offset = self.pointToIndex(point)
point = self.indexToPoint(offset)

# set up internal params
ndim = self.ndim
sizes = self.shape

# set widths and check
shape = list(shape)
if len(shape) &gt; ndim:
  raise ApiError("Number of submatrix dimensions %s exceeds ndim %s" % (shape,ndim))
for ii,width in enumerate(shape):
  if not width:
    shape[ii] = sizes[ii] - point[ii]
  elif width &lt; 0 or width &gt; sizes[ii] - point[ii]:
    raise ApiError("Size %s in dim %s out of permitted range" % (width,ii))
# Extend shape, padding to dimension sizes.
shape.extend(sizes[ii] - point[ii] for ii in range(len(shape),ndim))

# set up strides list and lowest dim with continuous data.
strides = ndim*[0]
factor = 1
dodim = 0
for ii in range(ndim-1,-1,-1):
  strides[ii] = factor
  factor *= sizes[ii]
  if not dodim and shape[ii] != sizes[ii]:
    dodim = ii

# length of contiguous stretch
stretch = strides[dodim] * shape[dodim]

# get hold of data (must bypass API for speed)
data = self.__dict__['data'] 
if not data:
  data.extend(self.size*[self.defaultValue])

# check value types
if [x for x in values if not isinstance(x,(float,int))]:
  raise ApiError("Non-numeric values passed to setSubmatrixData: %s" %  list(set(x for x in values if not isinstance(x,(float,int)))))

if dodim &lt;= 0:
  # set single stretch from 1D array
  data[offset:offset+stretch] =values
  
else:
  # do work for ndim array
  
  # check length and type of values
  import operator
  subsize = reduce(operator.mul, shape)
  if len(values) != subsize:
    raise ApiError("Number of values %s do not fit submatrix shape %s" % (subsize, shape))
  
  # set up multidimensional loop
  vector = (dodim)*[0]
  dim = dim0 = dodim - 1
  target = 0
  while dim &gt;= 0:
    
    # do actual work
    next = target+stretch
    data[offset:offset+stretch] = values[target:next] 
    target = next
    
    # update reading offset
    vector[dim] += 1
    if vector[dim] &lt; shape[dim]:
      offset += strides[dim]
      if dim &lt; dim0:
        dim += 1
    else:
      vector[dim] = 0
      dim -=1</item>
    </codeStubs>


    <MetaParameter name="point"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00024"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00023"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>

    <MetaParameter name="shape"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00025"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00023"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>

    <MetaParameter name="values"
     guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00026"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00023"
     direction="in_dir" hicard="-1" isImplicit="false" isOrdered="true"
     isUnique="false" locard="0">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00031</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaAttribute name="shape"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:02:26_00016"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   baseName="dimension" changeability="frozen" hicard="-1" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="true" isUnique="false" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>Matrix shape, slowest moving index first. SIze in first dimension (only) may be zero.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:54_00011</valueType>
  </MetaAttribute>

  <MetaAttribute name="size"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00002"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   baseName="size" changeability="frozen" hicard="1" isAbstract="false"
   isAutomatic="false" isDerived="true" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   scope="instance_level" visibility="public_vis">
    <documentation>Matrix size - product of dimensions sizes</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:54_00011</valueType>
  </MetaAttribute>

  <MetaOperation name="sizeFirstDim"
   guid="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00012"
   container="www.ccpn.ac.uk_Fogh_2011-03-30-17:55:17_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="otherModify"
   scope="instance_level" visibility="public_vis">
    <documentation>Change size in first (slowest) dimension, truncating or padding with self.defaultValue as necessary.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00012</target>
    <codeStubs>
      <item tag="java">/* NBNB TBD */</item>
      <item tag="python">if value &lt; 0:
  raise ApiError("Dimension size must be non-negative: %s" % value)

shapeList = self.__dict__['shape'] # must bypass API
lendiff = value - shapeList[0]
if lendiff:
  data = self.__dict__['data'] # must bypass API
  if data:
    # if data array is empty we have an all-default matrix
    if lendiff &gt; 0:
      data.extend([self.defaultValue]*self.pointToIndex((lendiff,)))
    else:
      # lendiff &lt; 0
      del data[self.pointToIndex((lendiff,)):]
  shapeList[0] = value</item>
    </codeStubs>


    <MetaParameter name="value"
     guid="www.ccpn.ac.uk_Fogh_2011-06-27-14:29:37_00001"
     container="www.ccpn.ac.uk_Fogh_2011-03-30-18:05:06_00012"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>
  </MetaOperation>
</MetaClass>

