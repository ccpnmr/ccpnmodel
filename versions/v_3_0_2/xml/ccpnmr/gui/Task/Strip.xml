<?xml version="1.0"?>
<!--
#######################################################################

CCPN Data Model version 3.0.2

Autogenerated by XmlModelIo on ?
  from data model element ccpnmr.gui.Task.Strip

#######################################################################
======================COPYRIGHT/LICENSE START==========================

Strip.xml: xmlmodel model for CCPN data model, MetaClass ccpnmr.gui.Task.Strip

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

A copy of this license can be found in ../../../../../../../../..//LGPL.license

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="Strip"
 guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
 container="www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00004"
 isAbstract="true" isDerived="false" isImplicit="false" isLeaf="false"
 isRoot="false" isSingleton="false" partitionsChildren="false"
 visibility="public_vis">
  <documentation>Abstract superclass for display strips</documentation>
  <keyNames>
    <item>serial</item>
  </keyNames>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00005</item>
    <item>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00004</item>
  </supertypes>

  <!-- Start constraints for <MetaClass: ccpnmr.gui.Task.Strip>: -->
  <MetaConstraint name="only_one_strip_in_non_strip_displays"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00007"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   isImplicit="false">
    <codeStubs>
      <item tag="python">not (self.index and self.spectrumDisplay.stripDirection is None)</item>
    </codeStubs>
  </MetaConstraint>
  <!-- End constraints for <MetaClass: ccpnmr.gui.Task.Strip>: -->


  <MetaOperation name="clone"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:53:34_00019"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Make duplicate of strip and place it as the last ordered strip.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-04-17:53:34_00019</target>
    <codeStubs>
      <item tag="python">from ccpnmodel.ccpncore.lib import CopyData
spectrumDisplay = self.spectrumDisplay

stripSerial = spectrumDisplay.__dict__['_serialDict']['strips'] + 1
for axis in spectrumDisplay.findAllAxes(stripSerial=self.serial):
  CopyData.copySubTree(axis, spectrumDisplay, maySkipCrosslinks=True, topObjectParameters={'stripSerial': stripSerial})
for view in spectrumDisplay.findAllSpectrumViews(stripSerial=self.serial):
  CopyData.copySubTree(view, spectrumDisplay, maySkipCrosslinks=True, topObjectParameters={'stripSerial': stripSerial})

makeStrip = getattr(spectrumDisplay, 'new'+self.className)
if 'Free' in self.className:
  result = makeStrip(axisCodes=self.axisCodes, axisOrder=self.axisOrder)
else:
  result = makeStrip(axisOrder=self.axisOrder)

undo = self.root._undo
if undo is not None:
   undo.newItem(result.delete, self.clone)</item>
    </codeStubs>


    <MetaParameter name="result"
     guid="www.ccpn.ac.uk_Fogh_2014-11-05-12:31:24_00003"
     container="www.ccpn.ac.uk_Fogh_2014-11-04-17:53:34_00019"
     direction="return_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="getOrderedAxes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:53:34_00020"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <target>www.ccpn.ac.uk_Fogh_2014-11-05-13:11:24_00002</target>
    <codeStubs>
      <item tag="python">display = self.spectrumDisplay
axisOrder = self.axisOrder
stripDirection = display.stripDirection
if stripDirection is None:
  result = tuple(display.findFirstAxis(code=x) for x in axisOrder)
else:
  result = []
  stripSerial = self.serial
  index = 'ZZZXY'.index(stripDirection)
  for ii,code in enumerate(axisOrder):
    if ii == index and index in (0, 1):
      result.append(display.findFirstAxis(code=code))
    else:
      axis = display.findFirstAxis(code=code, stripSerial=stripSerial)
      if axis is not None:
        result.append(axis)
      else:
        # get this first axis if stripSerial axis not found
        result.append(display.findFirstAxis(code=code))
  result = tuple(result)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getSpectrumViews"
   guid="www.ccpn.ac.uk_Fogh_2014-12-02-18:39:42_00005"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived link spectrumViews</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-12-02-18:39:42_00004</target>
    <codeStubs>
      <item tag="python">result = tuple(x.spectrumView for x in self.sortedStripSpectrumViews() )</item>
    </codeStubs>
  </MetaOperation>

  <MetaAttribute name="index"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:53:34_00016"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   baseName="index" changeability="frozen" forceUndoNotify="true" hicard="1"
   isAbstract="false" isAutomatic="true" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Index of strip in strip ordering, starting at zero, set automatically on object creation. New strips are added at the end of the list. Indices are reset when strips are deleted, by the Strip.moveTo(newIndex) command, and when the orderedStrips link is set.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
  </MetaAttribute>

  <MetaOperation name="moveTo"
   guid="www.ccpn.ac.uk_Fogh_2014-11-05-12:31:24_00004"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Move strip in stripOrder to position determined by newIndex</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-05-12:31:24_00004</target>
    <codeStubs>
      <item tag="python">if not isinstance(newIndex, int) or newIndex &lt; 0:
  raise ApiError("Parameter to moveTo function is not a non-negative integer: %s" % newIndex)

ii = 0
oldIndex = self.index
for strip in self.spectrumDisplay.orderedStrips:
  if strip is self:
    strip.__dict__['index'] = newIndex
    continue
  else:
    if ii == newIndex:
      ii += 1
    strip.__dict__['index'] = ii
    ii += 1

undo = self.root._undo
if undo is not None:
  undo.newItem(self.moveTo, self.moveTo, undoArgs=(oldIndex,), redoArgs=(
newIndex,))  </item>
    </codeStubs>


    <MetaParameter name="newIndex"
     guid="www.ccpn.ac.uk_Fogh_2014-11-05-12:31:24_00005"
     container="www.ccpn.ac.uk_Fogh_2014-11-05-12:31:24_00004"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaRole name="orderedAxes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-05-13:11:24_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   baseName="orderedAxis" changeability="changeable" forceUndoNotify="true"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2014-12-04-13:20:54_00002</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00005</valueType>
  </MetaRole>

  <MetaAttribute name="serial"
   guid="www.ccpn.ac.uk_Fogh_2014-11-05-12:31:24_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   baseName="serial" changeability="frozen" forceUndoNotify="true" hicard="1"
   isAbstract="false" isAutomatic="true" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Serial number of object. Serves as object main key. Serial numbers of deleted objects are not re-used. Serial numbers can only be set by the implementation. Values are in practice always positive, since negative values are interpreted as a signal to set the next free serial</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
  </MetaAttribute>

  <MetaOperation name="setOrderedAxes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-06-11:09:17_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   isAbstract="false" isImplicit="false" isQuery="false" opType="set"
   scope="instance_level" visibility="public_vis">
    <documentation>setter for derived link orderedAxes</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-05-13:11:24_00002</target>
    <codeStubs>
      <item tag="python">self.axisOrder = [(x and x.code) for x in values]
# The (x and x.code) trick gives None if x is None, x.code otherwise.</item>
    </codeStubs>
  </MetaOperation>

  <MetaRole name="spectrumDisplay"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00003"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   aggregation="composite" baseName="spectrumDisplay" changeability="frozen"
   forceUndoNotify="true" hicard="1" hierarchy="parent" isAbstract="true"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   noDeleteIfSet="false" partitionsChildren="false" scope="instance_level"
   visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00004</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005</valueType>
  </MetaRole>

  <MetaRole name="spectrumViews"
   guid="www.ccpn.ac.uk_Fogh_2014-12-02-18:39:42_00004"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   baseName="spectrumView" changeability="frozen" forceUndoNotify="true"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>SpectrumViews showing spectra viewed in this strip</documentation>
    <otherRole>www.ccpn.ac.uk_Fogh_2014-12-02-18:39:42_00003</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00010</valueType>
  </MetaRole>

  <MetaRole name="stripAxes"
   guid="www.ccpn.ac.uk_Fogh_2015-06-11-17:27:54_00004"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   baseName="stripAxis" changeability="changeable" forceUndoNotify="true"
   hicard="-1" hierarchy="child" isAbstract="false" isAutomatic="false"
   isDerived="false" isImplementation="false" isImplicit="false"
   isOrdered="false" isUnique="true" locard="0" noDeleteIfSet="false"
   partitionsChildren="false" scope="instance_level" visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2015-06-11-17:27:54_00003</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2015-06-11-17:25:49_00003</valueType>
  </MetaRole>

  <MetaRole name="stripSpectrumViews"
   guid="www.ccpn.ac.uk_Fogh_2015-06-11-17:27:54_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006"
   baseName="stripSpectrumView" changeability="changeable"
   forceUndoNotify="true" hicard="-1" hierarchy="child" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="0"
   noDeleteIfSet="false" partitionsChildren="false" scope="instance_level"
   visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2015-06-11-17:27:54_00001</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2015-06-11-17:25:49_00002</valueType>
  </MetaRole>
</MetaClass>

