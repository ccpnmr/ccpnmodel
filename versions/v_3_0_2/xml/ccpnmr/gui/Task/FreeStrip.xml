<?xml version="1.0"?>
<!--
#######################################################################

CCPN Data Model version 3.0.2

Autogenerated by XmlModelIo on ?
  from data model element ccpnmr.gui.Task.FreeStrip

#######################################################################
======================COPYRIGHT/LICENSE START==========================

FreeStrip.xml: xmlmodel model for CCPN data model, MetaClass ccpnmr.gui.Task.FreeStrip

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

A copy of this license can be found in ../../../../../../../../..//LGPL.license

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="FreeStrip"
 guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00030"
 container="www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00004"
 isAbstract="false" isDerived="false" isImplicit="false" isLeaf="false"
 isRoot="false" isSingleton="false" partitionsChildren="false"
 visibility="public_vis">
  <documentation>Abstract superclass of FreeStrip1d and FreeStripNd</documentation>
  <keyNames>
    <item>serial</item>
  </keyNames>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006</item>
  </supertypes>
  <constructorCodeStubs>
    <item tag="python"># NB, len(parent.strips) is the number INCLUDING the present one at the poinit the code is executed.
dataDict['index'] = len(parent.strips) - 1</item>
  </constructorCodeStubs>
  <destructorCodeStubs>
    <item tag="python">spectrumDisplay = self.spectrumDisplay
if len(spectrumDisplay.strips) &lt;= 1 and spectrumDisplay not in objsToBeDeleted:
  raise ApiError("Cannot delete last strip from a Display")
else:
  # reset strip indices
  index = self.index
  ii = 0
  for strip in self.spectrumDisplay.orderedStrips:
    if strip is not self:
      strip.__dict__['index'] = ii
      ii += 1

  # delete strip-specific objects
  for axis in spectrumDisplay.findAllAxes(stripSerial=self.serial):
    objsToBeChecked.append(axis)
  for view in spectrumDisplay.findAllSpectrumViews(stripSerial=self.serial):
    objsToBeChecked.append(view)</item>
  </destructorCodeStubs>
  <postConstructorCodeStubs>
    <item tag="python">_undo = root._undo
if _undo is not None:
  _undo.increaseBlocking()
try:
  for axis in self.spectrumDisplay.axes:
    if axis.stripSerial in (0, self.serial):
      sa = self.newStripAxis(axis=axis)
      objectsCreated.add(sa)
finally:
  if _undo is not None:
    _undo.decreaseBlocking()</item>
  </postConstructorCodeStubs>


  <MetaAttribute name="axisCodes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:44:49_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00030"
   baseName="axisCode" changeability="frozen" forceUndoNotify="true" hicard="-1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="false"
   locard="2" scope="instance_level" visibility="public_vis">
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>
  </MetaAttribute>

  <MetaAttribute name="axisOrder"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:44:00_00007"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00030"
   baseName="axisOrderItem" changeability="changeable" forceUndoNotify="true"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="false"
   locard="2" scope="instance_level" visibility="public_vis">
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>

    <!-- Start constraints for <MetaAttribute: ccpnmr.gui.Task.FreeStrip.axisOrder>: -->
    <MetaConstraint name="free_axis_order_codes_contained_in_axis_codes"
     guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:46:06_00001"
     container="www.ccpn.ac.uk_Fogh_2014-11-04-17:44:00_00007"
     isImplicit="false">
      <codeStubs>
        <item tag="python">value in self.axisCodes</item>
      </codeStubs>
    </MetaConstraint>
    <!-- End constraints for <MetaAttribute: ccpnmr.gui.Task.FreeStrip.axisOrder>: -->
  </MetaAttribute>

  <MetaOperation name="setAxisOrder"
   guid="www.ccpn.ac.uk_Fogh_2016-01-15-11:25:46_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00030"
   isAbstract="false" isImplicit="false" isQuery="false" opType="set"
   scope="instance_level" visibility="public_vis">
    <documentation>Custom setter for axisOrder, to ensure strip axis is not changed for multistrip plots</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-04-17:44:00_00007</target>
    <codeStubs>
      <item tag="python">if len(self.strips) &gt; 1:
  index = 'ZZZXY'.index(self.spectrumDisplay.stripDirection)
  if index in (0, 1) and values[index] != self.axisCodes[index]:
    raise ValueError("Cannot change strip axis for multistrip display while reordering axes")
dataDict['axisOrder'] = values</item>
    </codeStubs>
  </MetaOperation>

  <MetaRole name="spectrumDisplay"
   guid="www.ccpn.ac.uk_Fogh_2015-06-11-17:25:53_00003"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00030"
   aggregation="composite" baseName="spectrumDisplay" changeability="frozen"
   forceUndoNotify="true" hicard="1" hierarchy="parent" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   noDeleteIfSet="false" partitionsChildren="false" scope="instance_level"
   visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2015-06-11-17:25:53_00004</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00029</valueType>
  </MetaRole>
</MetaClass>

