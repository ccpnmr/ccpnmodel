<?xml version="1.0"?>
<!--
#######################################################################

CCPN Data Model version 3.0.2

Autogenerated by XmlModelIo on ?
  from data model element ccpnmr.gui.Task.SpectrumDisplay

#######################################################################
======================COPYRIGHT/LICENSE START==========================

SpectrumDisplay.xml: xmlmodel model for CCPN data model, MetaClass ccpnmr.gui.Task.SpectrumDisplay

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

A copy of this license can be found in ../../../../<topdirectory>/LGPL.license

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="SpectrumDisplay"
 guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
 container="www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00004"
 isAbstract="true" isDerived="false" isImplicit="false" isLeaf="false"
 isRoot="false" isSingleton="false" partitionsChildren="false"
 visibility="public_vis">
  <documentation>Abstract superclass for All SpectrumDisplay.
Either resonancGroup or resonanceGroupSerial can be passed in at creation time</documentation>
  <keyNames>
    <item>name</item>
  </keyNames>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00006</item>
    <item>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00004</item>
  </supertypes>

  <!-- Start constraints for <MetaClass: ccpnmr.gui.Task.SpectrumDisplay>: -->
  <MetaConstraint name="only_Y_axis_can_be_intensity"
   guid="www.ccpn.ac.uk_Fogh_2015-06-11-17:25:49_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isImplicit="false">
    <codeStubs>
      <item tag="python">axisCodes = self.axisCodes
isValid = ('intensity' not in axisCodes[:1] and 'intensity' not in axisCodes[2:])
</item>
    </codeStubs>
  </MetaConstraint>
  <!-- End constraints for <MetaClass: ccpnmr.gui.Task.SpectrumDisplay>: -->


  <MetaRole name="axes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00011"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="axis" changeability="changeable" forceUndoNotify="true" hicard="-1"
   hierarchy="child" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00010</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00005</valueType>
  </MetaRole>

  <MetaOperation name="copyToTask"
   guid="www.ccpn.ac.uk_Fogh_2014-11-11-18:25:59_00005"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Copy Module to target task.  NOT IN USE</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-11-18:25:59_00005</target>
    <codeStubs>
      <item tag="python">from ccpnmodel.ccpncore.lib import CopyData
# 
newModule = CopyData.copySubTree(self, newTask)

# remove links that cannot be fixed
newModule.resonanceGroupSerial = 0
for axis in newModule.axes:
  axis.resonanceSerials = ()
for spectrumView in newModule.spectrumViews:
  for peakListView in spectrumView.peakListViews:
    for peakView in peakListView.peakViews:
      peakView.delete()

# reconnect where possible
for spectrumView in newModule.sortedSpectrumViews:
  newExperiment = nmrProject.findFirstExperiment(name=spectrumView.experimentName)
  if newExperiment is not None:
    newDataSource = newExperiment.findFirstDataSource(serial=self.dataSourceSerial)
    if newDataSource is None:
      # Assume that the serials are different, and take the first DataSource you find
      # NBNB TBD Heuristic, will break for multiple DataSources
      newDataSource = newExperiment.findFirstDataSource()
      if newDataSource is not None:
        oldSpectrumView = spectrumView
        spectrumView = CopyData.copySubTree(spectrumView, newTask, topObjectParameters={'dataSourceSerial':newDataSource.serial})
        oldSpectrumView.delete()
        peakListViews = spectrumView.sortedPeakListViews()
        peakLists = newDataSource.sortedPeakLists()
        if any(x for x in peakListViews if newDataSource.findFirstPeakList(x.peakListSerial) is None):
          # Peak list serials do not match 
          if peakLists and len(peakListViews) == 1:
            # This is the only case we want to deal with for now
            newPeakListView = CopyData.copySubTree(peakListViews[0], spectrumView, topObjectParameters={'peakListSerial':peakLists[0].serial})</item>
    </codeStubs>


    <MetaParameter name="newTask"
     guid="www.ccpn.ac.uk_Fogh_2014-11-11-18:25:59_00006"
     container="www.ccpn.ac.uk_Fogh_2014-11-11-18:25:59_00005"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00013</valueType>
    </MetaParameter>

    <MetaParameter name="nmrProject"
     guid="www.ccpn.ac.uk_Fogh_2014-11-11-18:29:24_00001"
     container="www.ccpn.ac.uk_Fogh_2014-11-11-18:25:59_00005"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-18:19:48_00001</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaOperation name="disconnect"
   guid="www.ccpn.ac.uk_Fogh_2014-11-10-13:49:17_00007"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Disconnect module from NmrProject and windows, for inactivation, storage, and exchange. NOT IN USE</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-10-13:49:17_00007</target>
    <codeStubs>
      <item tag="python"># disconnect windows
window = self.window
if window is not None:
  self.windowId= window.serial
  self.window = None

# disconnect resonanceGroup
resonanceGroup = self.resonanceGroup
if resonanceGroup is not None:
  self.resonanceGroupSerial = resonanceGroup.serial
self.resonanceGroup = None

# disconnect Axis.resonances
for axis in self.axes:
  axis.resonanceSerials = [x.serial for x in axis.resonances]
  axis.resonances = ()

# Disconnect SpectrumView and descendants
for spectrumView in self.spectrumViews:
  dataSource = spectrumView.dataSource
  spectrumView.__dict__['dataSource'] = None
  if dataSource is not None:
    spectrumView.experimentType = dataSource.experiment.experimentType
  
  for peakListView in spectrumView.peakListViews:
    peakListView.peakList = None
    for peakView in peakListView.peakViews:
      peakView.delete()

undo = self.root._undo
if undo is not None:
   undo.newItem(self.reconnect, self.disconnect, undoArgs=(window,))</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getIs1d"
   guid="www.ccpn.ac.uk_Fogh_2015-06-11-17:26:36_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived attribute is1d</documentation>
    <target>www.ccpn.ac.uk_Fogh_2015-06-11-17:25:53_00005</target>
    <codeStubs>
      <item tag="python">result = (self.axisCodes and self.axisCodes[1] == 'intensity')</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getOrderedAxes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:52:44_00006"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <target>www.ccpn.ac.uk_Fogh_2014-11-05-13:11:24_00001</target>
    <codeStubs>
      <item tag="python">axisOrder = self.axisOrder
stripDirection = self.stripDirection
if stripDirection is None:
  result = tuple(self.findFirstAxis(code=x) for x in axisOrder)
else:
  result = []
  stripSerial = self.findFirstStrip(index=0).serial
  index = 'XY'.index(stripDirection)
  for ii,code in enumerate(axisOrder):
    if ii == index:
      result.append(self.findFirstAxis(code=code))
    else:
      result.append(self.findFirstAxis(code=code, stripSerial=stripSerial))
  result = tuple(result)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getOrderedStrips"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:52:44_00004"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived link orderedStrips</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00005</target>
    <codeStubs>
      <item tag="python">dd = dict((x.index, x) for x in self.strips)
result = tuple(dd[x] for x in sorted(dd))</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getStripCount"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:52:44_00003"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived attribute stripCount</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-04-17:52:44_00002</target>
    <codeStubs>
      <item tag="python">result = len(self.strips)</item>
    </codeStubs>
  </MetaOperation>

  <MetaAttribute name="is1d"
   guid="www.ccpn.ac.uk_Fogh_2015-06-11-17:25:53_00005"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="is1d" changeability="frozen" forceUndoNotify="true" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Is this a 1D display?</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
  </MetaAttribute>

  <MetaAttribute name="moduleType"
   guid="www.ccpn.ac.uk_Fogh_2016-06-22-02:40:58_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="moduleType" changeability="frozen" forceUndoNotify="true"
   hicard="1" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>
    <defaultValue>
      <item>SpectrumDisplay</item>
    </defaultValue>
  </MetaAttribute>

  <MetaRole name="orderedAxes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-05-13:11:24_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="orderedAxis" changeability="changeable" forceUndoNotify="true"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <valueType>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00005</valueType>
  </MetaRole>

  <MetaRole name="orderedStrips"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00005"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="orderedStrip" changeability="changeable" forceUndoNotify="true"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>Strips in current display order</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006</valueType>
  </MetaRole>

  <MetaOperation name="reconnect"
   guid="www.ccpn.ac.uk_Fogh_2014-11-10-13:49:17_00008"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Reconnect Module to Nmr data and window, assuming that the NmrProject data fit. Data that do not fit are removed (except for SpectrumViews)  NOT IN USE</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-10-13:49:17_00008</target>
    <codeStubs>
      <item tag="python"># Reset window ID.
self.windowId = window.serial

# Reconnect NMR data
nmrProject = self.task.nmrProject

resonanceGroup = nmrProject.findFirstResonanceGroup(serial=self.resonanceGroupSerial)
if resonanceGroup is None:
  self.resonanceGroupSerial = None

for axis in self.axes:
  ll = [nmrProject.findFirstResonance(serial=x) for x in axis.resonanceSerials]
  resonances = [x for x in ll if x is not None]
  axis.resonances = resonances
  axis.resonanceSerials = [x.serial for x in resonances]

for spectrumView in self.spectrumViews:
  for experiment in nmrProject.sortedExperiments():
    dataSources = experiment.findAllDataSources(name=spectrumView.spectrumName)
    if dataSources:
      dataSource = list(dataSources)[0]
      spectrumView.dataSource = dataSource
      break
  else:
    experiment = nmrProject.findFirstExperiment(experimentType=spectrumView.experimentType)
    if experiment is not None:
      dataSource = experiment.findFirstDataSource()
      spectrumView.__dict__['dataSource'] = dataSource

      # NBNB TBD We must remap dimensionOrdering, 
      # in case dimensions are ordered differnetly in the dataSource

  for peakListView in spectrumView.peakListViews:
    peakList = dataSource.findFirstPeakList(serial=peakListView.peakListSerial)
    if peakList is None:
      peakListView.delete()
    else:
      peakListView.peakList = peakList

undo = self.root._undo
if undo is not None:
   undo.newItem(self.disconnect, self.reconnect, redoArgs=(window,))</item>
    </codeStubs>


    <MetaParameter name="window"
     guid="www.ccpn.ac.uk_Fogh_2014-11-10-13:49:17_00009"
     container="www.ccpn.ac.uk_Fogh_2014-11-10-13:49:17_00008"
     direction="in_dir" hicard="1" isImplicit="false" isOrdered="false"
     isUnique="true" locard="1">
      <valueType>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00001</valueType>
    </MetaParameter>
  </MetaOperation>

  <MetaRole name="spectrumDisplays"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00008"
   container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:47_00034"
   baseName="spectrumDisplay" changeability="changeable" forceUndoNotify="true"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>Spectrum displays where ResonanceGroup is attached</documentation>
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00009</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005</valueType>
  </MetaRole>

  <MetaRole name="resonanceGroup"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00009"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="resonanceGroup" changeability="changeable" forceUndoNotify="true"
   hicard="1" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>ResonanceGroup attached to SpectrumDisplay</documentation>
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00008</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:47_00034</valueType>
  </MetaRole>

  <MetaAttribute name="resonanceGroupSerial"
   guid="www.ccpn.ac.uk_Fogh_2014-11-10-13:49:17_00006"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="resonanceGroupSerial" changeability="changeable"
   forceUndoNotify="true" hicard="1" isAbstract="false" isAutomatic="false"
   isDerived="false" isImplementation="false" isImplicit="false"
   isOrdered="false" isUnique="true" locard="0" scope="instance_level"
   visibility="public_vis">
    <documentation>Serial number of attached resonanceGroup. Used to store resonanceGroup liink while the task is detached.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:54_00001</valueType>
  </MetaAttribute>

  <MetaOperation name="setOrderedAxes"
   guid="www.ccpn.ac.uk_Fogh_2014-11-06-11:09:17_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="false" opType="set"
   scope="instance_level" visibility="public_vis">
    <documentation>setter for derived link orderedAxes</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-05-13:11:24_00001</target>
    <codeStubs>
      <item tag="python">erroneous = list(x for x in values if x.spectrumDisplay is not self)
if erroneous:
  raise ValueError("Axes %s do not belong to %s" % (erroneous, self))
else:
  self.axisOrder = [x.code for x in values]</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="setOrderedStrips"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:52:44_00005"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   isAbstract="false" isImplicit="false" isQuery="false" opType="set"
   scope="instance_level" visibility="public_vis">
    <documentation>setter for derived link orderedStrips</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00005</target>
    <codeStubs>
      <item tag="python">stripCount = self.stripCount
if len(value) != stripCount or len(set(value)) != stripCount:
  raise ValueError("Number of orderedStrips %s differs from number of strips %s" % (len(value), stripCount))
for ii, strip in enumerate(value):
  strip.__dict__['index'] = ii</item>
    </codeStubs>
  </MetaOperation>

  <MetaRole name="spectrumViews"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00007"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="spectrumView" changeability="changeable" forceUndoNotify="true"
   hicard="-1" hierarchy="child" isAbstract="false" isAutomatic="false"
   isDerived="false" isImplementation="false" isImplicit="false"
   isOrdered="false" isUnique="true" locard="0" noDeleteIfSet="false"
   partitionsChildren="false" scope="instance_level" visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00006</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-10-31-16:36:26_00010</valueType>
  </MetaRole>

  <MetaAttribute name="stripCount"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:52:44_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="stripCount" changeability="frozen" forceUndoNotify="true"
   hicard="1" isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Numbre of current strips</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
  </MetaAttribute>

  <MetaAttribute name="stripDirection"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:52:44_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="stripDirection" changeability="frozen" forceUndoNotify="true"
   hicard="1" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Strip Direction (if value is 'X' strips are wide and low, if value is 'Y', strips are tall and thin.). Value must be either 'X', 'Y'.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00017</valueType>
    <defaultValue>
      <item>Y</item>
    </defaultValue>
  </MetaAttribute>

  <MetaAttribute name="stripType"
   guid="www.ccpn.ac.uk_Fogh_2015-06-11-17:25:53_00006"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="stripType" changeability="frozen" forceUndoNotify="true" hicard="1"
   isAbstract="false" isAutomatic="true" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Strip type ('Free', or 'Bound')</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>
  </MetaAttribute>

  <MetaRole name="strips"
   guid="www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00004"
   container="www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00005"
   baseName="strip" changeability="changeable" forceUndoNotify="true"
   hicard="-1" hierarchy="child" isAbstract="true" isAutomatic="false"
   isDerived="false" isImplementation="false" isImplicit="false"
   isOrdered="false" isUnique="true" locard="0" noDeleteIfSet="false"
   partitionsChildren="false" scope="instance_level" visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-04-17:51:55_00003</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-04-17:39:35_00006</valueType>
  </MetaRole>
</MetaClass>

