<?xml version="1.0"?>
<!--
#######################################################################

CCPN Data Model version 3.0.2

Autogenerated by XmlModelIo on ?
  from data model element ccp.nmr.Nmr.SequentialAssignment

#######################################################################
======================COPYRIGHT/LICENSE START==========================

SequentialAssignment.xml: xmlmodel model for CCPN data model, MetaClass ccp.nmr.Nmr.SequentialAssignment

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

A copy of this license can be found in ../<topdirectory>/LGPL.license

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="SequentialAssignment"
 guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00006"
 isAbstract="false" isDerived="false" isImplicit="false" isLeaf="false"
 isRoot="false" isSingleton="false" partitionsChildren="false"
 visibility="public_vis">
  <documentation>Set of tentative ResonanceGroup assigned stretches. Intended to group e.g. sequential assignments done by different automatic programs (MARS, NEXUS) or manual to keep them separate.</documentation>
  <keyNames>
    <item>name</item>
  </keyNames>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00005</item>
  </supertypes>
  <destructorCodeStubs>
    <item tag="python">if self is self.root.currentSequentialAssignment:
  self.root.currentSequentialAssignment = None</item>
  </destructorCodeStubs>


  <MetaOperation name="activate"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00016"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Set SequentialAssignment to active, deactivatinig others.
Details: Sets activeResonanceGroups link from resonaceGroupSerials, removing resonanceGroupSerials, and updating connectedStretches to correct for deleted ResonanceGroups.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00016</target>
    <codeStubs>
      <item tag="python">predecessor = self.nmrProject.activeSequentialAssignment
if self is predecessor:
  return

elif predecessor is not None:
  predecessor.deactivate()

undo = self.root._undo
if undo is not None:
  if predecessor is None:
    undo.newItem(self.deactivate, self.activate)
  else:
    undo.newItem(predecessor.activate, self.activate)

self.__dict__['isActive'] = True
for stretch in self.connectedStretches:
  stretch.activate()</item>
    </codeStubs>
  </MetaOperation>

  <MetaRole name="connectedStretchs"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00013"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001"
   baseName="connectedStretch" changeability="changeable"
   forceUndoNotify="false" hicard="-1" isAbstract="false" isAutomatic="false"
   isDerived="false" isImplementation="false" isImplicit="false"
   isOrdered="false" isUnique="true" locard="0" noDeleteIfSet="false"
   partitionsChildren="false" scope="instance_level" visibility="public_vis">
    <documentation>OCnnected stretches that make upp tsequential assignment.</documentation>
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00012</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002</valueType>
  </MetaRole>

  <MetaOperation name="deactivate"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00017"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>remove activeResonanceGroups liink, and store stretch order in resonanceGroupSerials for later activation.</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00017</target>
    <codeStubs>
      <item tag="python">for stretch in self.connectedStretches:
  stretch.deactivate()
self.__dict__['isActive'] = False

undo = self.root._undo
if undo is not None:
  undo.newItem(self.activate, self.deactivate)</item>
    </codeStubs>
  </MetaOperation>

  <MetaAttribute name="isActive"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00015"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001"
   baseName="isActive" changeability="frozen" forceUndoNotify="false" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Is SeqientialAssignmetn active? Only one SequentialAssignment cab be active at any time.Cannot be modified directly, only by the activate() and deactivate() methods.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
    <defaultValue>
      <item>false</item>
    </defaultValue>
  </MetaAttribute>

  <MetaAttribute name="name"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00014"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001"
   baseName="name" changeability="frozen" forceUndoNotify="false" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Name 9and key) of sequentialAssignment.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00037</valueType>
    <defaultValue>
      <item>Manual</item>
    </defaultValue>
  </MetaAttribute>

  <MetaRole name="nmrProject"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:49:39_00008"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001"
   aggregation="composite" baseName="nmrProject" changeability="frozen"
   forceUndoNotify="false" hicard="1" hierarchy="parent" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   noDeleteIfSet="false" partitionsChildren="false" scope="instance_level"
   visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-17-17:49:39_00009</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-18:19:48_00001</valueType>
  </MetaRole>
</MetaClass>

