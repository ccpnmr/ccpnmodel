<?xml version="1.0"?>
<!--
#######################################################################

CCPN Data Model version 3.0.2

Autogenerated by XmlModelIo on ?
  from data model element ccp.nmr.Nmr.ConnectedStretch

#######################################################################
======================COPYRIGHT/LICENSE START==========================

ConnectedStretch.xml: xmlmodel model for CCPN data model, MetaClass ccp.nmr.Nmr.ConnectedStretch

Copyright (C) 2007  (CCPN Project)

=======================================================================

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

A copy of this license can be found in ../../../../../../license/LGPL.license

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


======================COPYRIGHT/LICENSE END============================

for further information, please contact :

- CCPN website (http://www.ccpn.ac.uk/)

- email: ccpn@bioc.cam.ac.uk

=======================================================================

If you are using this software for academic purposes, we suggest
quoting the following references:

===========================REFERENCE START=============================
Rasmus H. Fogh, Wayne Boucher, Wim F. Vranken, Anne
Pajon, Tim J. Stevens, T.N. Bhat, John Westbrook, John M.C. Ionides and
Ernest D. Laue (2005). A framework for scientific data modeling and automated
software development. Bioinformatics 21, 1678-1684.


This file was generated with the Memops software generation framework,
and contains original contributions embedded in the framework

===========================REFERENCE END===============================
-->

<MetaClass name="ConnectedStretch"
 guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
 container="www.ccpn.ac.uk_Fogh_2006-08-16-14:22:46_00006"
 isAbstract="false" isDerived="false" isImplicit="false" isLeaf="false"
 isRoot="false" isSingleton="false" partitionsChildren="false"
 visibility="public_vis">
  <documentation>Connected sequential stretch of resonanceGroups. When stretch is active there is a direct two-way link to the ResonanceGroup. When inactive the information is stored in the resonanceGroupsSerials attribute. In either case the stretch can be found through the resonanceGroups link.</documentation>
  <keyNames>
    <item>serial</item>
  </keyNames>
  <supertypes>
    <item>www.ccpn.ac.uk_Fogh_2006-09-14-16:28:57_00005</item>
  </supertypes>

  <!-- Start constraints for <MetaClass: ccp.nmr.Nmr.ConnectedStretch>: -->
  <MetaConstraint name="activeResonanceGroups_must_go_with_active_SequentialAssignments"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:49:36_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   isImplicit="false">
    <codeStubs>
      <item tag="python">bool(self.activeResonanceGroups) == self.sequentialAssignment.isActive</item>
    </codeStubs>
  </MetaConstraint>
  <!-- End constraints for <MetaClass: ccp.nmr.Nmr.ConnectedStretch>: -->


  <MetaOperation name="activate"
   guid="www.ccpn.ac.uk_Fogh_2014-11-18-09:56:51_00003"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>Connect stretch with activeResonanceGroups</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-18-09:56:51_00003</target>
    <codeStubs>
      <item tag="python">resonanceGroups = self.resonanceGroups
nmrChains = set(x.nmrChain for x in resonanceGroups)

if not self.sequentialAssignment.isActive:
  raise MemopsError("Cannot activate %s with inactive %s" % (self,  self.sequentialAssignment))

elif self.activeResonanceGroups:
  pass

elif None in resonanceGroups:
  print ("Stretch %s not activated, contains now deleted ResonanceGroups" % ['@%s' % x.serial for x in resonanceGroups])

elif any(x for x in resonanceGroups if x.residue or x.relativeOffset):
    print ("Stretch %s not activated, contains fully assigned or offset ResonanceGroups" % [x.sequenceCode for x in resonanceGroups])

elif len(nmrChains) != 1:
  print ("Stretch %s not activated - matches multiple NmrChains:" % (['@%s' % x.serial for x in resonanceGroups], [x.code for x in set(x.nmrChain for x in resonanceGroups)]))

elif nmrChains.pop().code == '@-':
  print ("Stretch %s not activated - matches NmrChain '@-':" % (['@%s' % x.serial for x in resonanceGroups]))

else:
  stretch.resonanceGroupSerials = ()
  self.activeResonanceGroups = resonanceGroups </item>
    </codeStubs>
  </MetaOperation>

  <MetaRole name="activeResonanceGroups"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00003"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   baseName="acriveResonanceGroup" changeability="changeable"
   forceUndoNotify="false" hicard="-1" isAbstract="false" isAutomatic="false"
   isDerived="false" isImplementation="false" isImplicit="false"
   isOrdered="true" isUnique="true" locard="0" noDeleteIfSet="false"
   partitionsChildren="false" scope="instance_level" visibility="public_vis">
    <documentation>ResonanceGroups currently attached to ConnectedStretch.
Will automatically be unset when ConnectedStretch is set to inactive.
NB activeResonances should NOT contain ResonanceGroups that are assigned to a residue or have relativeOffset set, or that belong to chain '@-'. This is checked when setting ResonanceGroup.nextResonanceGroup and previousResonanceGroup, and by the activate command. It is NOT checked when setting this link directly or when changing the assignment of Resonancegroups. It is up to the user to keep this consistent, but deactivate followed by activate will ensure consistency.</documentation>
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00004</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:47_00034</valueType>
  </MetaRole>

  <MetaOperation name="deactivate"
   guid="www.ccpn.ac.uk_Fogh_2014-11-18-09:56:51_00004"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   isAbstract="false" isImplicit="false" isQuery="false" opType="other"
   scope="instance_level" visibility="public_vis">
    <documentation>remove activeResonanceGroups and store their serials in resonanceGroupSerials </documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-18-09:56:51_00004</target>
    <codeStubs>
      <item tag="python">self.resonanceGroupSerials = tuple(x.serial for x in self.activeResonanceGroups)
self.activeResonanceGroups = ()</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getIsActive"
   guid="www.ccpn.ac.uk_Fogh_2014-11-18-09:56:51_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived attribure isActive</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-18-09:56:51_00001</target>
    <codeStubs>
      <item tag="python">result = bool(self.activeResonanceGroups)</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getNmrChain"
   guid="www.ccpn.ac.uk_Fogh_2015-07-03-10:47:38_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived link NmrChain</documentation>
    <target>www.ccpn.ac.uk_Fogh_2015-07-03-10:47:38_00002</target>
    <codeStubs>
      <item tag="python"># NBNB TBD change model to ensure that NmrChain&lt;-&gt;ConnectedStretch link is one-to-one

nmrChains = set(x.nmrChain for x in self.activeResonanceGroups)
if not nmrChains:
  result = None
elif len(nmrChains) == 1:
  result = nmrChains.pop()
else:
  raise ApiError("Inconsistent data - ConnectedStretch associated with more than one NmrChain")</item>
    </codeStubs>
  </MetaOperation>

  <MetaOperation name="getResonanceGroups"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:49:39_00007"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   isAbstract="false" isImplicit="false" isQuery="true" opType="get"
   scope="instance_level" visibility="public_vis">
    <documentation>getter for derived link resonanceGroups</documentation>
    <target>www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00005</target>
    <codeStubs>
      <item tag="python">if self.sequentiqalAssignment.isActive:
  result = self.activeResonanceGroups
else:
  ff = self.nmrProject.findFirstResonanceGroup
  result = tuple(ff(x) for x in self.resonanceGroupSerials)</item>
    </codeStubs>
  </MetaOperation>

  <MetaAttribute name="isActive"
   guid="www.ccpn.ac.uk_Fogh_2014-11-18-09:56:51_00001"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   baseName="isActive" changeability="frozen" forceUndoNotify="false" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Is ConnectedStretch active - does it have activeResonanceGroups</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00028</valueType>
  </MetaAttribute>

  <MetaRole name="nmrChain"
   guid="www.ccpn.ac.uk_Fogh_2015-07-03-10:47:38_00002"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   baseName="nmrChain" changeability="frozen" forceUndoNotify="false" hicard="1"
   isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>NmrChain associated with ConnectedStretch</documentation>
    <otherRole>www.ccpn.ac.uk_Fogh_2015-07-03-10:47:38_00003</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-07-30-17:44:22_00001</valueType>
  </MetaRole>

  <MetaRole name="nmrProject"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:49:39_00010"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   aggregation="composite" baseName="nmrProject" changeability="frozen"
   forceUndoNotify="false" hicard="1" hierarchy="parent" isAbstract="false"
   isAutomatic="false" isDerived="false" isImplementation="false"
   isImplicit="false" isOrdered="false" isUnique="true" locard="1"
   noDeleteIfSet="false" partitionsChildren="false" scope="instance_level"
   visibility="public_vis">
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-17-17:49:40_00001</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-18:19:48_00001</valueType>
  </MetaRole>

  <MetaAttribute name="resonanceGroupSerials"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:49:39_00006"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   baseName="resonanceGroup" changeability="changeable" forceUndoNotify="false"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="false"
   locard="0" scope="instance_level" visibility="public_vis">
    <documentation>Serial numbers of connected resonanceGroups, set when ConnectedStretch is inactive. Stores original stretch assignment regardless of later (re)assignment.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:54_00001</valueType>
  </MetaAttribute>

  <MetaRole name="resonanceGroups"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00005"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   baseName="resonanceGroup" changeability="frozen" forceUndoNotify="false"
   hicard="-1" isAbstract="false" isAutomatic="false" isDerived="true"
   isImplementation="false" isImplicit="false" isOrdered="true" isUnique="true"
   locard="0" noDeleteIfSet="false" partitionsChildren="false"
   scope="instance_level" visibility="public_vis">
    <documentation>Resonance groups making up tentatively assigned stretch, in order of increasing sequence code. NB the result may contain None, if a ResonanceGroup from the orignal stretch has been deleted, and may contain ResonanceGroups that are now fully assigned or have been given a relastiveOffset, even though these would not be legal to set.</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:47_00034</valueType>
  </MetaRole>

  <MetaRole name="sequentialAssignment"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00012"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   baseName="sequentialAssignment" changeability="frozen"
   forceUndoNotify="false" hicard="1" isAbstract="false" isAutomatic="false"
   isDerived="false" isImplementation="false" isImplicit="false"
   isOrdered="false" isUnique="true" locard="1" noDeleteIfSet="false"
   partitionsChildren="false" scope="instance_level" visibility="public_vis">
    <documentation>Seaueltial Assignment that thes stretch belongs to.</documentation>
    <otherRole>www.ccpn.ac.uk_Fogh_2014-11-17-17:50:06_00013</otherRole>
    <valueType>www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00001</valueType>
  </MetaRole>

  <MetaAttribute name="serial"
   guid="www.ccpn.ac.uk_Fogh_2014-11-17-17:49:39_00005"
   container="www.ccpn.ac.uk_Fogh_2014-11-17-17:48:52_00002"
   baseName="serial" changeability="frozen" forceUndoNotify="false" hicard="1"
   isAbstract="false" isAutomatic="true" isDerived="false"
   isImplementation="false" isImplicit="false" isOrdered="false" isUnique="true"
   locard="1" scope="instance_level" visibility="public_vis">
    <documentation>Serial number of object. Serves as object main key. Serial numbers of deleted objects are not re-used. Serial numbers can only be set by the implementation. Values are in practice always positive, since negative values are interpreted as a signal to set the next free serial</documentation>
    <valueType>www.ccpn.ac.uk_Fogh_2006-08-16-14:22:53_00032</valueType>
  </MetaAttribute>
</MetaClass>

